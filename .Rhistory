OverallQual_boxplot <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = SalePrice)) +
geom_boxplot() +labs(title="Distribution of House prices by overall quality rating",
x ="Overal qaulity rating", y = "House price ($)")
OverallQual_boxplot
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
library(tidyverse)
library(scales)
#Read the training data
cleaned_train_data <- read.csv("./Data/cleaned_train.csv", stringsAsFactors = TRUE)
cleaned_test_data <- read.csv("./Data/cleaned_test.csv", stringsAsFactors = TRUE)
cleaned_target <- read.csv("./Data/cleaned_target.csv", stringsAsFactors = TRUE)
cleaned_train_data$SalePrice = cleaned_target$SalePrice
cleaned_train_data$OverallQual = as.factor(cleaned_train_data$OverallQual)
OverallQual_boxplot <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = SalePrice)) +
geom_boxplot() +
labs(title="Distribution of House prices by overall quality rating", x ="Overal qaulity rating", y = "House price ($)") +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
OverallQual_boxplot
theme_set(theme_gray(base_size = 18))
OverallQual_boxplot
OverallQual_boxplot
OverallQual_boxplot
theme_set(theme_gray(base_size = 14))
OverallQual_boxplot
theme_set(theme_gray(axis.text = element_text(size = 20)))
theme_set(theme_gray(axis.text_size = 14))
cleaned_train_data$OverallQual = as.factor(cleaned_train_data$OverallQual)
OverallQual_boxplot <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = SalePrice)) +
geom_boxplot() +
labs(title="Distribution of House prices by overall quality rating", x ="Overal qaulity rating", y = "House price ($)") +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3)) +
theme_classic()
OverallQual_boxplot
cleaned_train_data$OverallQual = as.factor(cleaned_train_data$OverallQual)
OverallQual_boxplot <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = SalePrice)) +
geom_boxplot() +
labs(title="Distribution of House prices by overall quality rating", x ="Overal qaulity rating", y = "House price ($)") +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3)) +
theme_economist()
OverallQual_boxplot
old_theme <- theme_set(theme_economist((base_size = 14))
old_theme <- theme_set(theme_economist((base_size = 14)))
old_theme <- theme_set(theme_economist((base_size = 14)))
library("ggplot2")
old_theme <- theme_set(theme_economist((base_size = 14)))
install.packages("ggthemes")
library(ggthemes)
old_theme <- theme_set(theme_economist((base_size = 14)))
OverallQual_boxplot <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = SalePrice)) +
geom_boxplot() +
labs(title="Distribution of House prices by overall quality rating", x ="Overal qaulity rating", y = "House price ($)") +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3)) +
OverallQual_boxplot
cleaned_train_data$OverallQual = as.factor(cleaned_train_data$OverallQual)
OverallQual_boxplot <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = SalePrice)) +
geom_boxplot() +
labs(title="Distribution of House prices by overall quality rating", x ="Overal qaulity rating", y = "House price ($)") +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3)) +
OverallQual_boxplot
old_theme <- theme_set(theme_economist())
cleaned_train_data$OverallQual = as.factor(cleaned_train_data$OverallQual)
OverallQual_boxplot <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = SalePrice)) +
geom_boxplot() +
labs(title="Distribution of House prices by overall quality rating", x ="Overal qaulity rating", y = "House price ($)") +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3)) +
cleaned_train_data$OverallQual = as.factor(cleaned_train_data$OverallQual)
OverallQual_boxplot <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = SalePrice)) +
geom_boxplot() +
labs(title="Distribution of House prices by overall quality rating", x ="Overal qaulity rating", y = "House price ($)") +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
OverallQual_boxplot
old_theme <- theme_set(theme_minimal())
cleaned_train_data$OverallQual = as.factor(cleaned_train_data$OverallQual)
OverallQual_boxplot <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = SalePrice)) +
geom_boxplot() +
labs(title="Distribution of House prices by overall quality rating", x ="Overal qaulity rating", y = "House price ($)") +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
OverallQual_boxplot
old_theme <- theme_set(theme_stata())
#Boxplots house prices grouped for categorical
cleaned_train_data$OverallQual = as.factor(cleaned_train_data$OverallQual)
OverallQual_boxplot <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = SalePrice)) +
geom_boxplot() +
labs(title="Distribution of House prices by overall quality rating", x ="Overal qaulity rating", y = "House price ($)") +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
OverallQual_boxplot
old_theme <- theme_set(theme_hc())
#Boxplots house prices grouped for categorical
cleaned_train_data$OverallQual = as.factor(cleaned_train_data$OverallQual)
OverallQual_boxplot <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = SalePrice)) +
geom_boxplot() +
labs(title="Distribution of House prices by overall quality rating", x ="Overal qaulity rating", y = "House price ($)") +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
OverallQual_boxplot
old_theme <- theme_set(theme_linedraw())
cleaned_train_data$OverallQual = as.factor(cleaned_train_data$OverallQual)
OverallQual_boxplot <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = SalePrice)) +
geom_boxplot() +
labs(title="Distribution of House prices by overall quality rating", x ="Overal qaulity rating", y = "House price ($)") +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
OverallQual_boxplot
old_theme <- theme_set(theme_linedraw(plot.title = element_text(size = 16)))
old_theme <- theme_set(theme_linedraw(), plot.title = element_text(size = 16))
old_theme <- theme_set(theme_linedraw() + theme(plot.title = element_text(size = 16)))
old_theme <- theme_set(theme_linedraw() + theme(plot.title = element_text(size = 16, face = "bold")))
OverallQual_boxplot
old_theme <- theme_set(theme_linedraw() +
theme(plot.title = element_text(size = 16, face = "bold")) +
theme(axis.title.y = element_text(size = 14,)) +
theme(axis.title.x = element_text(size = 10,))
)
OverallQual_boxplot
old_theme <- theme_set(theme_linedraw() +
theme(plot.title = element_text(size = 16, face = "bold")) +
theme(axis.title = element_text(size = 14,)) +
theme(axis.text = element_text(size = 14,))
)
OverallQual_boxplot
LivingSpace_scatterplot <- ggplot(data = cleaned_train_data, aes(x = TotLivArea, y = SalePrice)) +
geom_point()
LivingSpace_scatterplot
#Read the training data
train_data <- read.csv("./Data/train.csv", stringsAsFactors = FALSE)
test_data <- read.csv("./Data/test.csv", stringsAsFactors = FALSE)
#head(cleaned_train_data)
#head(test_data)
#summary(train_data)
apply(train_data, 2, unique)
selected_cols <- c("Id", "LotArea", "OverallQual", "GarageCars", "TotRmsAbvGrd", "OverallCond", "GrLivArea", "TotalBsmtSF", "Fireplaces", "CentralAir", "Street")
cleaned_train_data <- train_data[selected_cols]
cleaned_test_data <- test_data[selected_cols]
cleaned_target <- train_data[c("Id", "SalePrice")]
#Impute missing values in test data set
cleaned_test_data$GarageCars =  ifelse(is.na(cleaned_test_data$GarageCars), 0, cleaned_test_data$GarageCars)
cleaned_test_data$TotalBsmtSF =ifelse(is.na(cleaned_test_data$TotalBsmtSF), 0, cleaned_test_data$TotalBsmtSF)
#Combining month+year into single ordered feature
cleaned_train_data$YrSold = train_data$YrSold + ((train_data$MoSold - 1) / 12)
cleaned_test_data$YrSold = test_data$YrSold + ((test_data$MoSold - 1) / 12)
#Convert quality text into ranking
convert_quality_factor <- function(Qual, imputed_Val) {
ranking = ifelse(is.na(Qual), imputed_Val, Qual)
ranking = gsub("Po", 1, ranking)
ranking = gsub("Fa", 2, ranking)
ranking = gsub("TA", 3, ranking)
ranking = gsub("Gd", 4, ranking)
ranking = gsub("Ex", 5, ranking)
ranking = as.integer(ranking)
return(ranking)
}
cleaned_train_data$KitchenQual = convert_quality_factor(train_data$KitchenQual, 1)
cleaned_test_data$KitchenQual = convert_quality_factor(test_data$KitchenQual, 1)
cleaned_train_data$ExterQual = convert_quality_factor(train_data$ExterQual, 1)
cleaned_test_data$ExterQual = convert_quality_factor(test_data$ExterQual, 1)
cleaned_train_data$ExterCond = convert_quality_factor(train_data$ExterCond, 1)
cleaned_test_data$ExterCond = convert_quality_factor(test_data$ExterCond, 1)
cleaned_train_data$HeatingQC = convert_quality_factor(train_data$HeatingQC, 1)
cleaned_test_data$HeatingQC = convert_quality_factor(test_data$HeatingQC, 1)
cleaned_train_data$GarageQual = convert_quality_factor(train_data$GarageQual, 0)
cleaned_test_data$GarageQual = convert_quality_factor(test_data$GarageQual, 0)
cleaned_train_data$PoolQC = convert_quality_factor(train_data$PoolQC, 0)
cleaned_test_data$PoolQC = convert_quality_factor(test_data$PoolQC, 0)
cleaned_train_data$BsmtCond = convert_quality_factor(train_data$BsmtCond, 1)
cleaned_test_data$BsmtCond = convert_quality_factor(test_data$BsmtCond, 1)
#Convert Fence quality text into ranking
convert_fence_factor <- function(Qual) {
ranking = ifelse(is.na(Qual), 5, Qual)
ranking = gsub("MnWw", 1, ranking)
ranking = gsub("GdWo", 2, ranking)
ranking = gsub("MnPrv", 3, ranking)
ranking = gsub("GdPrv", 4, ranking)
ranking = as.integer(ranking)
return(ranking)
}
cleaned_train_data$Fence = convert_fence_factor(train_data$Fence)
cleaned_test_data$Fence = convert_fence_factor(test_data$Fence)
#Convert Basement exposure text into ranking
convert_BsmtExp_factor <- function(Qual) {
ranking = ifelse(is.na(Qual), 0, Qual)
ranking = gsub("No", 1, ranking)
ranking = gsub("Mn", 2, ranking)
ranking = gsub("Av", 3, ranking)
ranking = gsub("Gd", 4, ranking)
ranking = as.integer(ranking)
return(ranking)
}
cleaned_train_data$BsmtExposure = convert_BsmtExp_factor (train_data$BsmtExposure)
cleaned_test_data$BsmtExposure = convert_BsmtExp_factor (test_data$BsmtExposure)
#Convert Building Type text into ranking
convert_buildtype_factor <- function(Qual) {
ranking = ifelse(is.na(Qual), 0, Qual)
ranking = gsub("Twnhs", 4, ranking)
ranking = gsub("TwnhsE", 2, ranking)
ranking = gsub("Duplex", 3, ranking)
ranking = gsub("2fmCon", 1, ranking)
ranking = gsub("1Fam", 5, ranking)
ranking = as.integer(ranking)
return(ranking)
}
cleaned_train_data$BldgType = convert_buildtype_factor(train_data$BldgType)
cleaned_test_data$BldgType = convert_buildtype_factor(test_data$BldgType)
#Convert Functional text into ranking
convert_functional_factor <- function(Qual) {
ranking = ifelse(is.na(Qual), 1, Qual)
ranking = gsub("Sal", 0, ranking)
ranking = gsub("Sev", 0, ranking)
ranking = gsub("Maj1", 1, ranking)
ranking = gsub("Maj2", 1, ranking)
ranking = gsub("Mod", 2, ranking)
ranking = gsub("Min1", 3, ranking)
ranking = gsub("Min2", 3, ranking)
ranking = gsub("Typ", 4, ranking)
ranking = as.integer(ranking)
return(ranking)
}
cleaned_train_data$Functional = convert_functional_factor(train_data$Functional)
cleaned_test_data$Functional = convert_functional_factor(test_data$Functional)
#Convert proximity features
cleaned_train_data$ProxPos = ifelse((train_data$Condition1 == "PosA") | (train_data$Condition2 == "PosA") | (train_data$Condition1 == "PosN") | (train_data$Condition2 == "PosN"), 1, 0)
cleaned_train_data$ProxRoad = ifelse((train_data$Condition1 == "Artery") | (train_data$Condition2 == "Artery") | (train_data$Condition1 == "Feedr") | (train_data$Condition2 == "Feedr"), 1, 0)
cleaned_train_data$ProxRail = ifelse((train_data$Condition1 == "RRAn") | (train_data$Condition1 == "RRAe") | (train_data$Condition2 == "RRAn") | (train_data$Condition2 == "RRAe") | (train_data$Condition1 == "RRNn") | (train_data$Condition1 == "RRNe") | (train_data$Condition2 == "RRNn") | (train_data$Condition2 == "RRNe"), 1, 0)
cleaned_test_data$ProxPos = ifelse((test_data$Condition1 == "PosA") | (test_data$Condition2 == "PosA") | (test_data$Condition1 == "PosN") | (test_data$Condition2 == "PosN"), 1, 0)
cleaned_test_data$ProxRoad = ifelse((test_data$Condition1 == "Artery") | (test_data$Condition2 == "Artery") | (test_data$Condition1 == "Feedr") | (test_data$Condition2 == "Feedr"), 1, 0)
cleaned_test_data$ProxRail = ifelse((test_data$Condition1 == "RRAn") | (test_data$Condition1 == "RRAe") | (test_data$Condition2 == "RRAn") | (test_data$Condition2 == "RRAe") | (test_data$Condition1 == "RRNn") | (test_data$Condition1 == "RRNe") | (test_data$Condition2 == "RRNn") | (test_data$Condition2 == "RRNe"), 1, 0)
#Convert heating into gas or not
cleaned_train_data$Heating = ifelse((train_data$Heating == "GasA" | train_data$Heating == "GasW" |train_data$Heating == "OthW"), 1, 0)
cleaned_test_data$Heating = ifelse((test_data$Heating == "GasA" | test_data$Heating == "GasW" |test_data$Heating == "OthW"), 1, 0)
#Convert basement type into ranking
basement_factor = 6
basement_convert_factor <- function(FinType) {
basement = ifelse(is.na(FinType), 2,  FinType)
basement = gsub("Unf", 1, basement)
basement = gsub("LwQ", 1, basement)
basement = gsub("Rec", 2, basement)
basement = gsub("BLQ", 3, basement)
basement = gsub("ALQ", 4, basement)
basement = gsub("GLQ", 5, basement)
basement = as.integer(basement)
return(basement)
}
#Combine basement rankings in weighted average by surface of the 2 named types and counting the unfinished part with factor 1
basement_weight <- function(FinType1, FinType2, SF1, SF2, SF3) {
basement1 = basement_convert_factor(FinType1)
basement2 = basement_convert_factor(FinType2)
basement1SF = ifelse(is.na(SF1), 0,  SF1)
basement2SF = ifelse(is.na(SF2), 0,  SF2)
basement3SF = ifelse(is.na(SF3), 0,  SF3)
basement_weighted = ifelse((SF1+SF2+SF3) > 0, as.numeric((basement1 * basement1SF + basement2 * basement2SF + basement3SF) / (basement1SF + basement2SF + basement3SF)), 0)
return(basement_weighted)
}
Train_Basement = basement_weight(train_data$BsmtFinType1, train_data$BsmtFinType2, train_data$BsmtFinSF1, train_data$BsmtFinSF2, train_data$BsmtUnfSF)
Test_Basement = basement_weight(test_data$BsmtFinType1, test_data$BsmtFinType2, test_data$BsmtFinSF1, test_data$BsmtFinSF2, test_data$BsmtUnfSF)
cleaned_train_data$BasementQualFactor = Train_Basement
cleaned_test_data$BasementQualFactor = ifelse(is.na(Test_Basement), 0, Test_Basement)
#Combined living space feature
#cleaned_train_data$WeightedTotLivArea = train_data$GrLivArea + (Train_Basement / basement_factor) * ifelse(is.na(train_data$TotalBsmtSF), 0, train_data$TotalBsmtSF)
cleaned_train_data$TotLivArea = train_data$GrLivArea + train_data$TotalBsmtSF
cleaned_test_data$TotLivArea = test_data$GrLivArea + ifelse(is.na(test_data$TotalBsmtSF), 0, test_data$TotalBsmtSF)
#cleaned_train_data$WeightedBasementSF = (Train_Basement / basement_factor) * ifelse(is.na(train_data$TotalBsmtSF), 0, train_data$TotalBsmtSF)
#Combining number of bathrooms above ground and basement
cleaned_train_data$FullBath = train_data$FullBath + train_data$BsmtFullBath
cleaned_test_data$FullBath = test_data$FullBath + ifelse(is.na(test_data$BsmtFullBath), 1,  test_data$BsmtFullBath)
cleaned_train_data$HalfBath = train_data$HalfBath + train_data$BsmtHalfBath
cleaned_test_data$HalfBath = test_data$HalfBath + ifelse(is.na(test_data$BsmtHalfBath), 1, test_data$BsmtHalfBath)
#Combined enclosed porch feature
cleaned_train_data$PorchSF = train_data$EnclosedPorch + train_data$X3SsnPorch + train_data$ScreenPorch
cleaned_test_data$PorchSF = test_data$EnclosedPorch + test_data$X3SsnPorch + test_data$ScreenPorch
#Store Neighborhoods as integers ordered by median saleprice
cleaned_train_data$Neighborhood = factor(reorder(train_data$Neighborhood, train_data$SalePrice, median))
cleaned_test_data$Neighborhood = as.integer(factor(test_data$Neighborhood, levels = levels(cleaned_train_data$Neighborhood)))
cleaned_train_data$Neighborhood = as.integer(cleaned_train_data$Neighborhood)
#Store MSSubClass as integers ordered by median saleprice
cleaned_train_data$MSSubClass = factor(reorder(train_data$MSSubClass, train_data$SalePrice, median))
cleaned_test_data$MSSubClass = as.integer(factor(test_data$MSSubClass, levels = c(levels(cleaned_train_data$MSSubClass), 150)))
cleaned_train_data$MSSubClass = as.integer(cleaned_train_data$MSSubClass)
#Store SaleCondition as integers ordered by median saleprice
cleaned_train_data$SaleCondition = factor(reorder(train_data$SaleCondition, train_data$SalePrice, median))
cleaned_test_data$SaleCondition = as.integer(factor(test_data$SaleCondition, levels = levels(cleaned_train_data$SaleCondition)))
cleaned_train_data$SaleCondition = as.integer(cleaned_train_data$SaleCondition)
#Combined recency factor
#remod_factor = 0.5
#cleaned_train_data$Recency = 2011 - train_data$YearRemodAdd + remod_factor * (train_data$YearRemodAdd - train_data$YearBuilt)
#cleaned_test_data$Recency = 2011 - test_data$YearRemodAdd + remod_factor * (test_data$YearRemodAdd - test_data$YearBuilt)
#Save cleaned data set
write.csv(cleaned_train_data, "./Data/cleaned_train.csv", row.names = FALSE)
write.csv(cleaned_target, "./Data/cleaned_target.csv", row.names = FALSE)
write.csv(cleaned_test_data, "./Data/cleaned_test.csv", row.names = FALSE)
library(tidyverse)
library(ggthemes)
library(scales)
old_theme <- theme_set(theme_linedraw() +
theme(plot.title = element_text(size = 16, face = "bold")) +
theme(axis.title = element_text(size = 14,)) +
theme(axis.text = element_text(size = 14,))
)
#Read the training data
cleaned_train_data <- read.csv("./Data/cleaned_train.csv", stringsAsFactors = TRUE)
cleaned_test_data <- read.csv("./Data/cleaned_test.csv", stringsAsFactors = TRUE)
cleaned_target <- read.csv("./Data/cleaned_target.csv", stringsAsFactors = TRUE)
cleaned_train_data$SalePrice = cleaned_target$SalePrice
LivingSpace_scatterplot <- ggplot(data = cleaned_train_data, aes(x = TotLivArea, y = SalePrice)) +
geom_point()
LivingSpace_scatterplot
LivingSpace_quality_scatterplot <- ggplot(data = cleaned_train_data, aes(x = TotLivArea, y = SalePrice, color=OverallQual)) +
geom_point()
LivingSpace_quality_scatterplot
OverallQual_boxplot2 <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = TotLivArea)) +
geom_boxplot() +
labs(title="Distribution of living area by overall quality rating", x ="Overal qaulity rating", y = "Linving area (sqf)")
OverallQual_boxplot2
cleaned_train_data$OverallQual = as.factor(cleaned_train_data$OverallQual)
OverallQual_boxplot2 <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = TotLivArea)) +
geom_boxplot() +
labs(title="Distribution of living area by overall quality rating", x ="Overal qaulity rating", y = "Linving area (sqf)")
OverallQual_boxplot2
OverallQual_boxplot2 <- ggplot(data = cleaned_train_data, aes(x = OverallQual, y = TotLivArea)) +
geom_boxplot() +
labs(title="Distribution of living area by overall quality rating", x ="Overal qaulity rating", y = "Linving area (sqf)") +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
OverallQual_boxplot2
LivingSpace_quality_scatterplot
AboveGrSpace_scatterplot <- ggplot(data = cleaned_train_data, aes(x = GrLivArea, y = SalePrice)) +
geom_point() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
BasementSpace_scatterplot <- ggplot(data = cleaned_train_data, aes(x = TotalBsmtSF, y = SalePrice, color = BasementWeigths)) +
geom_point() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
wBasementSpace_scatterplot <- ggplot(data = cleaned_train_data, aes(x = WeightedBasementSF, y = SalePrice)) +
geom_point() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
AboveGrSpace_scatterplot
BasementSpace_scatterplot
BasementSpace_scatterplot <- ggplot(data = cleaned_train_data, aes(x = TotalBsmtSF, y = SalePrice)) +
geom_point() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
BasementSpace_scatterplot
LivingSpace_scatterplot
AboveGrSpace_scatterplot <- ggplot(data = cleaned_train_data, aes(x = GrLivArea, y = SalePrice)) +
geom_point() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
BasementSpace_scatterplot <- ggplot(data = cleaned_train_data, aes(x = TotalBsmtSF, y = SalePrice)) +
geom_point() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
LivingSpace_scatterplot <- ggplot(data = cleaned_train_data, aes(x = TotLivArea, y = SalePrice)) +
geom_point() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
LivingSpace_quality_scatterplot <- ggplot(data = cleaned_train_data, aes(x = TotLivArea, y = SalePrice, color=OverallQual)) +
geom_point() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
AboveGrSpace_scatterplot
BasementSpace_scatterplot
LivingSpace_scatterplot
LivingSpace_quality_scatterplot
selection <- select(cleaned_train_data, c("TotLivArea, OverallQuall, SalePrice"))
selection.drop(selection$TotLivArea > 4000)
selection$TotLivAreaBins = round(selection$TotLivArea / 10000, digits = 1)
selection
selection <- cleaned_train_data
selection <- select(selection, c("TotLivArea, OverallQuall, SalePrice"))
View(selection)
selection <- select(cleaned_train_data, c("SalePrice"))
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea"))
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection.drop(selection$TotLivArea > 4000)
selection[-(selection$TotLivArea > 4000)]
selection <- select(cleaned_train_data, c("Id", "SalePrice", "TotLivArea", "OverallQual"))
selection[-(selection$TotLivArea > 4000)]
selection <- select(cleaned_train_data, c(SalePrice", "TotLivArea", "OverallQual"))
selection[-(selection$TotLivArea > 4000)]
selection$TotLivAreaBins = round(selection$TotLivArea / 10000, digits = 1)
selection
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection[-(selection$TotLivArea > 4000)]
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection[-(selection$TotLivArea > 4000)]
selection$TotLivAreaBins = round(selection$TotLivArea / 10000, digits = 1)
selection
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection[-(selection$TotLivArea > 4000)]
selection$TotLivAreaBins = round(selection$TotLivArea / 1000, digits = 1)
selection
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection[-(selection$TotLivArea > 4000)]
selection$TotLivArea = round(selection$TotLivArea / 1000, digits = 1)
selection
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection[-(selection$TotLivArea > 4000)]
selection[-(selection$TotLivArea < 1000)]
selection$TotLivArea = round(selection$TotLivArea / 1000, digits = 1)
selection
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection[-(selection$TotLivArea > 4000)]
selection[-(selection$TotLivArea < 1000)]
selection$TotLivArea = as.factor(round(selection$TotLivArea / 1000, digits = 1))
selection.groupby(TotLivArea, OverallQual)
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection[-(selection$TotLivArea > 4000)]
selection[-(selection$TotLivArea < 1000)]
selection$TotLivArea = as.factor(round(selection$TotLivArea / 1000, digits = 1))
groupby(selection, TotLivArea, OverallQual)
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual")) %>%
.[-(selection$TotLivArea > 4000)] %>%
.[-(selection$TotLivArea < 1000)]
selection$TotLivArea = as.factor(round(selection$TotLivArea / 1000, digits = 1))
groupby(selection, TotLivArea, OverallQual)
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual")) %>%
.[-(selection$TotLivArea > 4000)] %>%
.[-(selection$TotLivArea < 1000)]
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection[-(selection$TotLivArea > 4000)]
selection[-(selection$TotLivArea < 1000)]
selection$TotLivArea = as.factor(round(selection$TotLivArea / 1000, digits = 1))
grouped <- group_by(selection, TotLivArea, OverallQual) %>%
summarize(., avSalePrice = mean(SalePrice))
grouped
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection[-(selection$TotLivArea > 4000)]
selection[-(selection$TotLivArea < 1000)]
selection$TotLivArea = as.factor(round(selection$TotLivArea / 1000, digits = 1))
selection
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection <- selection[-(selection$TotLivArea > 4000)]
selection <- selection[-(selection$TotLivArea < 1000)]
selection$TotLivArea = as.factor(round(selection$TotLivArea / 1000, digits = 1))
grouped <- group_by(selection, TotLivArea, OverallQual) %>%
summarize(., avSalePrice = mean(SalePrice))
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection <- selection[-(selection$TotLivArea > 4000)]
selection
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection <- selection[-(selection$TotLivArea > 4000)]
selection
(selection$TotLivArea > 4000)
selection <- selection[(selection$TotLivArea < 4000)]
selection <- selection[(selection$TotLivArea < 4000),]
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection <- selection[(selection$TotLivArea < 4000),]
selection <- selection[(selection$TotLivArea > 1000),]
selection$TotLivArea = as.factor(round(selection$TotLivArea / 1000, digits = 1))
grouped <- group_by(selection, TotLivArea, OverallQual) %>%
summarize(., avSalePrice = mean(SalePrice))
grouped
grouped_plot <- ggplot(data = grouped, aes(x = TotLivArea, y = avSalePrice, color = OverallQual)) +
geom_line() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
grouped_plot
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection <- selection[(selection$TotLivArea < 4000),]
selection <- selection[(selection$TotLivArea > 1000),]
selection$TotLivArea = as.factor(cut_width(selection$TotLivArea, width = 200))
selection
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection <- selection[(selection$TotLivArea < 4000),]
selection <- selection[(selection$TotLivArea > 1000),]
selection$TotLivArea = as.factor(cut_width(selection$TotLivArea / 1000, width = 0.2))
selection
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection <- selection[(selection$TotLivArea < 4000),]
selection <- selection[(selection$TotLivArea > 1000),]
selection$TotLivArea = as.factor(cut_width(selection$TotLivArea / 1000, width = 0.25))
selection
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection <- selection[(selection$TotLivArea < 4000),]
selection <- selection[(selection$TotLivArea > 1000),]
selection$TotLivArea = as.factor(cut_width(selection$TotLivArea / 1000, width = 0.25, boundary = 1))
selection
grouped <- group_by(selection, TotLivArea, OverallQual) %>%
summarize(., avSalePrice = mean(SalePrice))
grouped_plot <- ggplot(data = grouped, aes(x = TotLivArea, y = avSalePrice, color = OverallQual)) +
geom_line() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
grouped_plot
grouped <- group_by(selection, TotLivArea, OverallQual) %>%
summarize(., avSalePrice = mean(SalePrice))
grouped_plot <- ggplot(data = grouped, aes(x = TotLivArea, y = avSalePrice)) +
geom_line() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
grouped_plot
grouped <- group_by(selection, TotLivArea, OverallQual) %>%
summarize(., avSalePrice = mean(SalePrice))
grouped_plot <- ggplot(data = grouped, aes(x = TotLivArea, y = avSalePrice, color = OverallQual)) +
geom_point() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
grouped_plot
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection <- selection[(selection$TotLivArea < 4000),]
selection <- selection[(selection$TotLivArea > 1000),]
selection$TotLivArea = as.factor(cut_width(selection$TotLivArea / 1000, width = 0.25, boundary = 1))
selection$OverallQual = as.integer(selection$OverallQual)
grouped <- group_by(selection, TotLivArea, OverallQual) %>%
summarize(., avSalePrice = mean(SalePrice))
grouped_plot <- ggplot(data = grouped, aes(x = TotLivArea, y = avSalePrice, color = OverallQual)) +
geom_point() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
grouped_plot
grouped_plot <- ggplot(data = grouped, aes(x = TotLivArea, y = avSalePrice, color = OverallQual)) +
geom_line() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
grouped_plot
selection <- select(cleaned_train_data, c("SalePrice", "TotLivArea", "OverallQual"))
selection <- selection[(selection$TotLivArea < 4000),]
selection <- selection[(selection$TotLivArea > 1000),]
selection$TotLivArea = as.factor(cut_width(selection$TotLivArea / 1000, width = 0.25, boundary = 1))
grouped <- group_by(selection, TotLivArea, OverallQual) %>%
summarize(., avSalePrice = mean(SalePrice))
grouped_plot <- ggplot(data = grouped, aes(x = TotLivArea, y = avSalePrice, color = OverallQual)) +
geom_point() +
scale_y_continuous(labels = label_number(suffix = " k", scale = 1e-3))
grouped_plot
